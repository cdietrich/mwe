/*******************************************************************************
 * Copyright (c) 2010 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
module org.eclipse.emf.mwe2.language.GenerateMwe2

import org.eclipse.emf.mwe2.runtime.workflow.Workflow
import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var grammarURI = "classpath:/org/eclipse/emf/mwe2/language/Mwe2.xtext"
var file.extensions = "mwe2"
var projectName = "org.eclipse.emf.mwe2.language"
var runtimeProject = "../${projectName}"
var uiProject = "${runtimeProject}.ui"

Workflow {
	
	bean = StandaloneSetup {
		platformUri = "${runtimeProject}/../../../"
	}
	
	component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}
	
	component = DirectoryCleaner {
		directory = "${runtimeProject}.ui/src-gen"
	}
	
	component = Generator {
		pathRtProject = runtimeProject
		pathUiProject = uiProject
		projectNameRt = projectName
		projectNameUi = "${projectName}.ui"
		
		language = {
			uri = grammarURI
			fileExtensions = file.extensions

			// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment {}
			
			// the serialization component
			fragment = parseTreeConstructor.ParseTreeConstructorFragment {}
			
			// a custom ResourceFactory for use with EMF 
			fragment = resourceFactory.ResourceFactoryFragment {
				fileExtensions = file.extensions
			}
				
			fragment = parser.antlr.ex.rt.AntlrGeneratorFragment {}
			
			fragment = parser.antlr.ex.ExternalAntlrLexerFragment {
				lexerGrammar = "org.eclipse.emf.mwe2.language.lexer.Mwe2Lexer"
				runtime = true
				antlrParam = "-lib"
				antlrParam = "${runtimeProject}/src-gen/org/eclipse/emf/mwe2/language/parser/antlr/lexer"
			}
			
			// java-based API for validation 
			fragment = validation.JavaValidatorFragment {
                composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
            }
            
			// scoping API 
			fragment = scoping.ImportNamespacesScopingFragment {}
			
			// java types 
			fragment = types.TypesGeneratorFragment {}
			
			// formatter API 
			fragment = formatting.FormatterFragment {}

			// labeling API 
			fragment = labeling.LabelProviderFragment {}

			// outline API 
			fragment = outline.TransformerFragment {}
			fragment = outline.OutlineNodeAdapterFactoryFragment {}
			fragment = outline.QuickOutlineFragment {}

			// java-based API for content assistance 
			fragment = contentAssist.JavaBasedContentAssistFragment {}
			
			fragment = de.itemis.xtext.antlr.ex.ca.ContentAssistParserGeneratorFragment {}

			fragment = builder.BuilderIntegrationFragment {}
			fragment = exporting.QualifiedNamesFragment {}
			fragment = de.itemis.xtext.antlr.ex.ExternalAntlrLexerFragment {
				lexerGrammar = "org.eclipse.emf.mwe2.language.ui.highlighting.MweHighlighting"
				highlighting = true
			}

			fragment = de.itemis.xtext.antlr.ex.ExternalAntlrLexerFragment {
				lexerGrammar = "org.eclipse.emf.mwe2.language.ui.contentassist.Mwe2ContentAssistLexer"
				contentAssist = true
				antlrParam = "-lib"
				antlrParam = "${uiProject}/src-gen/org/eclipse/emf/mwe2/language/ui/contentassist/antlr/lexer"
			}
			// quickfix API 
			fragment = quickfix.QuickfixProviderFragment {}			
		}
	}
}
